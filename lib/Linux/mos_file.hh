#ifndef MOS_H
#define MOS_H

#include <string>
#include <vector>
#include <fstream>
#include <SDL2/SDL.h>
#include "datatypes.hh"
#include "var.hh"

struct Sprite
{
	word data[16];
};

class Spritesheet
{
public:
	word header;
	word nSprites;
	std::vector<Sprite> sprite_data;

	int load_file(const char* path)
	{
		char tmp_word[2];
		Sprite tmp_sprite;

		std::ifstream sprite_file(path, std::ifstream::binary);

		sprite_file.read(tmp_word, 2);
		header = ((tmp_word[0] << 8) & 0xFF00) + (tmp_word[1] & 0xFF);
		if(header != 0x4D53) return -1;

		sprite_file.read(tmp_word, 2);
		nSprites = ((tmp_word[0] << 8) & 0xFF00) + (tmp_word[1] & 0xFF);
		if(nSprites == 0) return -1;

		for(int n = 0; n < nSprites; n++)
		{
			for(int i = 0; i < 16; i++)
			{
				sprite_file.read(tmp_word, 2);
				tmp_sprite.data[i] = ((tmp_word[0] << 8) & 0xFF00) + (tmp_word[1] & 0xFF);
			}
			sprite_data.push_back(tmp_sprite);
		}
		return 0;
	}

	void draw_sprite(SDL_Renderer* renderer, int id, vec2 pos, mono_palette pal)
	{
		for(int y = 0; y < 16; y++)
		{
			for(int x = 0; x < 16; x++)
			{
				if((sprite_data[id].data[y] >> (15 - x)) & 0x01 == 1) iSDL_SetRenderDrawColor(renderer, pal.fg);
				else iSDL_SetRenderDrawColor(renderer, pal.bg);

				SDL_Rect pixel = iSDL_Rect((pos.x + x) * _PIXELSCALE, (pos.y + y) * _PIXELSCALE, _PIXELSCALE, _PIXELSCALE);
				SDL_RenderFillRect(renderer, &pixel);
			}
		}
	}
};

#endif /* end of include guard: MOS_H */

/*
File Structure:
0x4D 0x53 																																			Header (MS)
0x00 0x04																																				Num Sprites (H byte, L byte)
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00	Data Sprite 0 (1 Bit = 1 Pixel)
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00	Data Sprite 1 (1 Bit = 1 Pixel)
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00	Data Sprite 2 (1 Bit = 1 Pixel)
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00	Data Sprite 3 (1 Bit = 1 Pixel)
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
*/
